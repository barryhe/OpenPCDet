2020-10-24 20:27:42,484   INFO  **********************Start logging**********************
2020-10-24 20:27:42,484   INFO  CUDA_VISIBLE_DEVICES=ALL
2020-10-24 20:27:42,484   INFO  total_batch_size: 2
2020-10-24 20:27:42,484   INFO  cfg_file         cfgs/nuscenes_models/tpoint_rcnn.yaml
2020-10-24 20:27:42,484   INFO  batch_size       2
2020-10-24 20:27:42,484   INFO  epochs           3
2020-10-24 20:27:42,485   INFO  workers          8
2020-10-24 20:27:42,485   INFO  extra_tag        default
2020-10-24 20:27:42,485   INFO  ckpt             None
2020-10-24 20:27:42,485   INFO  pretrained_model None
2020-10-24 20:27:42,485   INFO  launcher         pytorch
2020-10-24 20:27:42,485   INFO  tcp_port         18888
2020-10-24 20:27:42,485   INFO  sync_bn          False
2020-10-24 20:27:42,485   INFO  fix_random_seed  False
2020-10-24 20:27:42,485   INFO  ckpt_save_interval 1
2020-10-24 20:27:42,485   INFO  local_rank       0
2020-10-24 20:27:42,485   INFO  max_ckpt_save_num 30
2020-10-24 20:27:42,485   INFO  merge_all_iters_to_one_epoch False
2020-10-24 20:27:42,486   INFO  set_cfgs         None
2020-10-24 20:27:42,486   INFO  max_waiting_mins 0
2020-10-24 20:27:42,486   INFO  start_epoch      0
2020-10-24 20:27:42,486   INFO  save_to_file     False
2020-10-24 20:27:42,486   INFO  cfg.ROOT_DIR: /home/ubuntu/pointcloud/OpenPCDet
2020-10-24 20:27:42,486   INFO  cfg.LOCAL_RANK: 0
2020-10-24 20:27:42,486   INFO  cfg.CLASS_NAMES: ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone']
2020-10-24 20:27:42,486   INFO  
cfg.DATA_CONFIG = edict()
2020-10-24 20:27:42,486   INFO  cfg.DATA_CONFIG.DATASET: NuScenesDataset
2020-10-24 20:27:42,486   INFO  cfg.DATA_CONFIG.DATA_PATH: ../data/nuscenes
2020-10-24 20:27:42,486   INFO  cfg.DATA_CONFIG.VERSION: v1.0-mini
2020-10-24 20:27:42,486   INFO  cfg.DATA_CONFIG.MAX_SWEEPS: 10
2020-10-24 20:27:42,487   INFO  cfg.DATA_CONFIG.PRED_VELOCITY: False
2020-10-24 20:27:42,487   INFO  cfg.DATA_CONFIG.SET_NAN_VELOCITY_TO_ZEROS: True
2020-10-24 20:27:42,487   INFO  cfg.DATA_CONFIG.FILTER_MIN_POINTS_IN_GT: 1
2020-10-24 20:27:42,487   INFO  
cfg.DATA_CONFIG.DATA_SPLIT = edict()
2020-10-24 20:27:42,487   INFO  cfg.DATA_CONFIG.DATA_SPLIT.train: train
2020-10-24 20:27:42,487   INFO  cfg.DATA_CONFIG.DATA_SPLIT.test: val
2020-10-24 20:27:42,487   INFO  
cfg.DATA_CONFIG.INFO_PATH = edict()
2020-10-24 20:27:42,487   INFO  cfg.DATA_CONFIG.INFO_PATH.train: ['nuscenes_infos_10sweeps_train.pkl']
2020-10-24 20:27:42,487   INFO  cfg.DATA_CONFIG.INFO_PATH.test: ['nuscenes_infos_10sweeps_val.pkl']
2020-10-24 20:27:42,487   INFO  cfg.DATA_CONFIG.POINT_CLOUD_RANGE: [-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]
2020-10-24 20:27:42,487   INFO  cfg.DATA_CONFIG.BALANCED_RESAMPLING: True
2020-10-24 20:27:42,487   INFO  
cfg.DATA_CONFIG.DATA_AUGMENTOR = edict()
2020-10-24 20:27:42,487   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.DISABLE_AUG_LIST: ['placeholder']
2020-10-24 20:27:42,488   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.AUG_CONFIG_LIST: [{'NAME': 'gt_sampling', 'DB_INFO_PATH': ['nuscenes_dbinfos_10sweeps_withvelo.pkl'], 'PREPARE': {'filter_by_min_points': ['car:5', 'truck:5', 'construction_vehicle:5', 'bus:5', 'trailer:5', 'barrier:5', 'motorcycle:5', 'bicycle:5', 'pedestrian:5', 'traffic_cone:5']}, 'SAMPLE_GROUPS': ['car:2', 'truck:3', 'construction_vehicle:7', 'bus:4', 'trailer:6', 'barrier:2', 'motorcycle:6', 'bicycle:6', 'pedestrian:2', 'traffic_cone:2'], 'NUM_POINT_FEATURES': 5, 'DATABASE_WITH_FAKELIDAR': False, 'REMOVE_EXTRA_WIDTH': [0.0, 0.0, 0.0], 'LIMIT_WHOLE_SCENE': True}, {'NAME': 'random_world_flip', 'ALONG_AXIS_LIST': ['x', 'y']}, {'NAME': 'random_world_rotation', 'WORLD_ROT_ANGLE': [-0.3925, 0.3925]}, {'NAME': 'random_world_scaling', 'WORLD_SCALE_RANGE': [0.95, 1.05]}]
2020-10-24 20:27:42,488   INFO  
cfg.DATA_CONFIG.POINT_FEATURE_ENCODING = edict()
2020-10-24 20:27:42,488   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.encoding_type: absolute_coordinates_encoding
2020-10-24 20:27:42,488   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.used_feature_list: ['x', 'y', 'z', 'intensity', 'timestamp']
2020-10-24 20:27:42,488   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.src_feature_list: ['x', 'y', 'z', 'intensity', 'timestamp']
2020-10-24 20:27:42,488   INFO  cfg.DATA_CONFIG.DATA_PROCESSOR: [{'NAME': 'mask_points_and_boxes_outside_range', 'REMOVE_OUTSIDE_BOXES': True}, {'NAME': 'sample_points', 'NUM_POINTS': {'train': 16384, 'test': 16384}}, {'NAME': 'shuffle_points', 'SHUFFLE_ENABLED': {'train': True, 'test': False}}]
2020-10-24 20:27:42,488   INFO  cfg.DATA_CONFIG._BASE_CONFIG_: cfgs/dataset_configs/nuscenes_dataset.yaml
2020-10-24 20:27:42,488   INFO  
cfg.MODEL = edict()
2020-10-24 20:27:42,488   INFO  cfg.MODEL.NAME: PointRCNN
2020-10-24 20:27:42,488   INFO  
cfg.MODEL.BACKBONE_3D = edict()
2020-10-24 20:27:42,488   INFO  cfg.MODEL.BACKBONE_3D.NAME: PointNet2MSG
2020-10-24 20:27:42,489   INFO  
cfg.MODEL.BACKBONE_3D.SA_CONFIG = edict()
2020-10-24 20:27:42,489   INFO  cfg.MODEL.BACKBONE_3D.SA_CONFIG.NPOINTS: [4096, 1024, 256, 64]
2020-10-24 20:27:42,489   INFO  cfg.MODEL.BACKBONE_3D.SA_CONFIG.RADIUS: [[0.1, 0.5], [0.5, 1.0], [1.0, 2.0], [2.0, 4.0]]
2020-10-24 20:27:42,489   INFO  cfg.MODEL.BACKBONE_3D.SA_CONFIG.NSAMPLE: [[16, 32], [16, 32], [16, 32], [16, 32]]
2020-10-24 20:27:42,489   INFO  cfg.MODEL.BACKBONE_3D.SA_CONFIG.MLPS: [[[16, 16, 32], [32, 32, 64]], [[64, 64, 128], [64, 96, 128]], [[128, 196, 256], [128, 196, 256]], [[256, 256, 512], [256, 384, 512]]]
2020-10-24 20:27:42,489   INFO  cfg.MODEL.BACKBONE_3D.FP_MLPS: [[128, 128], [256, 256], [512, 512], [512, 512]]
2020-10-24 20:27:42,489   INFO  
cfg.MODEL.POINT_HEAD = edict()
2020-10-24 20:27:42,489   INFO  cfg.MODEL.POINT_HEAD.NAME: PointHeadBox
2020-10-24 20:27:42,489   INFO  cfg.MODEL.POINT_HEAD.CLS_FC: [256, 256]
2020-10-24 20:27:42,489   INFO  cfg.MODEL.POINT_HEAD.REG_FC: [256, 256]
2020-10-24 20:27:42,489   INFO  cfg.MODEL.POINT_HEAD.CLASS_AGNOSTIC: False
2020-10-24 20:27:42,489   INFO  cfg.MODEL.POINT_HEAD.USE_POINT_FEATURES_BEFORE_FUSION: False
2020-10-24 20:27:42,490   INFO  
cfg.MODEL.POINT_HEAD.TARGET_CONFIG = edict()
2020-10-24 20:27:42,490   INFO  cfg.MODEL.POINT_HEAD.TARGET_CONFIG.GT_EXTRA_WIDTH: [0.2, 0.2, 0.2]
2020-10-24 20:27:42,490   INFO  cfg.MODEL.POINT_HEAD.TARGET_CONFIG.BOX_CODER: PointResidualCoder
2020-10-24 20:27:42,490   INFO  
cfg.MODEL.POINT_HEAD.TARGET_CONFIG.BOX_CODER_CONFIG = edict()
2020-10-24 20:27:42,490   INFO  cfg.MODEL.POINT_HEAD.TARGET_CONFIG.BOX_CODER_CONFIG.use_mean_size: False
2020-10-24 20:27:42,490   INFO  
cfg.MODEL.POINT_HEAD.LOSS_CONFIG = edict()
2020-10-24 20:27:42,490   INFO  cfg.MODEL.POINT_HEAD.LOSS_CONFIG.LOSS_REG: WeightedSmoothL1Loss
2020-10-24 20:27:42,490   INFO  
cfg.MODEL.POINT_HEAD.LOSS_CONFIG.LOSS_WEIGHTS = edict()
2020-10-24 20:27:42,490   INFO  cfg.MODEL.POINT_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.point_cls_weight: 1.0
2020-10-24 20:27:42,490   INFO  cfg.MODEL.POINT_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.point_box_weight: 1.0
2020-10-24 20:27:42,490   INFO  cfg.MODEL.POINT_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
2020-10-24 20:27:42,490   INFO  
cfg.MODEL.ROI_HEAD = edict()
2020-10-24 20:27:42,491   INFO  cfg.MODEL.ROI_HEAD.NAME: PointRCNNHead
2020-10-24 20:27:42,491   INFO  cfg.MODEL.ROI_HEAD.CLASS_AGNOSTIC: True
2020-10-24 20:27:42,491   INFO  
cfg.MODEL.ROI_HEAD.ROI_POINT_POOL = edict()
2020-10-24 20:27:42,491   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL.POOL_EXTRA_WIDTH: [0.0, 0.0, 0.0]
2020-10-24 20:27:42,491   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL.NUM_SAMPLED_POINTS: 512
2020-10-24 20:27:42,491   INFO  cfg.MODEL.ROI_HEAD.ROI_POINT_POOL.DEPTH_NORMALIZER: 70.0
2020-10-24 20:27:42,491   INFO  cfg.MODEL.ROI_HEAD.XYZ_UP_LAYER: [128, 128]
2020-10-24 20:27:42,491   INFO  cfg.MODEL.ROI_HEAD.CLS_FC: [256, 256]
2020-10-24 20:27:42,491   INFO  cfg.MODEL.ROI_HEAD.REG_FC: [256, 256]
2020-10-24 20:27:42,491   INFO  cfg.MODEL.ROI_HEAD.DP_RATIO: 0.0
2020-10-24 20:27:42,491   INFO  cfg.MODEL.ROI_HEAD.USE_BN: False
2020-10-24 20:27:42,491   INFO  
cfg.MODEL.ROI_HEAD.SA_CONFIG = edict()
2020-10-24 20:27:42,491   INFO  cfg.MODEL.ROI_HEAD.SA_CONFIG.NPOINTS: [128, 32, -1]
2020-10-24 20:27:42,492   INFO  cfg.MODEL.ROI_HEAD.SA_CONFIG.RADIUS: [0.2, 0.4, 100]
2020-10-24 20:27:42,492   INFO  cfg.MODEL.ROI_HEAD.SA_CONFIG.NSAMPLE: [16, 16, 16]
2020-10-24 20:27:42,492   INFO  cfg.MODEL.ROI_HEAD.SA_CONFIG.MLPS: [[128, 128, 128], [128, 128, 256], [256, 256, 512]]
2020-10-24 20:27:42,492   INFO  
cfg.MODEL.ROI_HEAD.NMS_CONFIG = edict()
2020-10-24 20:27:42,492   INFO  
cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN = edict()
2020-10-24 20:27:42,492   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_TYPE: nms_gpu
2020-10-24 20:27:42,492   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.MULTI_CLASSES_NMS: False
2020-10-24 20:27:42,492   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_PRE_MAXSIZE: 9000
2020-10-24 20:27:42,492   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_POST_MAXSIZE: 512
2020-10-24 20:27:42,492   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_THRESH: 0.8
2020-10-24 20:27:42,492   INFO  
cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST = edict()
2020-10-24 20:27:42,492   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_TYPE: nms_gpu
2020-10-24 20:27:42,493   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.MULTI_CLASSES_NMS: False
2020-10-24 20:27:42,493   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_PRE_MAXSIZE: 9000
2020-10-24 20:27:42,493   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_POST_MAXSIZE: 100
2020-10-24 20:27:42,493   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_THRESH: 0.85
2020-10-24 20:27:42,493   INFO  
cfg.MODEL.ROI_HEAD.TARGET_CONFIG = edict()
2020-10-24 20:27:42,493   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.BOX_CODER: ResidualCoder
2020-10-24 20:27:42,493   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.ROI_PER_IMAGE: 128
2020-10-24 20:27:42,493   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.FG_RATIO: 0.5
2020-10-24 20:27:42,493   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.SAMPLE_ROI_BY_EACH_CLASS: True
2020-10-24 20:27:42,493   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.CLS_SCORE_TYPE: cls
2020-10-24 20:27:42,493   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.CLS_FG_THRESH: 0.6
2020-10-24 20:27:42,493   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.CLS_BG_THRESH: 0.45
2020-10-24 20:27:42,494   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.CLS_BG_THRESH_LO: 0.1
2020-10-24 20:27:42,494   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.HARD_BG_RATIO: 0.8
2020-10-24 20:27:42,494   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.REG_FG_THRESH: 0.55
2020-10-24 20:27:42,494   INFO  
cfg.MODEL.ROI_HEAD.LOSS_CONFIG = edict()
2020-10-24 20:27:42,494   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.CLS_LOSS: BinaryCrossEntropy
2020-10-24 20:27:42,494   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.REG_LOSS: smooth-l1
2020-10-24 20:27:42,494   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.CORNER_LOSS_REGULARIZATION: True
2020-10-24 20:27:42,494   INFO  
cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS = edict()
2020-10-24 20:27:42,494   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.rcnn_cls_weight: 1.0
2020-10-24 20:27:42,494   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.rcnn_reg_weight: 1.0
2020-10-24 20:27:42,494   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.rcnn_corner_weight: 1.0
2020-10-24 20:27:42,494   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
2020-10-24 20:27:42,494   INFO  
cfg.MODEL.POST_PROCESSING = edict()
2020-10-24 20:27:42,495   INFO  cfg.MODEL.POST_PROCESSING.RECALL_THRESH_LIST: [0.3, 0.5, 0.7]
2020-10-24 20:27:42,495   INFO  cfg.MODEL.POST_PROCESSING.SCORE_THRESH: 0.1
2020-10-24 20:27:42,495   INFO  cfg.MODEL.POST_PROCESSING.OUTPUT_RAW_SCORE: False
2020-10-24 20:27:42,495   INFO  cfg.MODEL.POST_PROCESSING.EVAL_METRIC: kitti
2020-10-24 20:27:42,495   INFO  
cfg.MODEL.POST_PROCESSING.NMS_CONFIG = edict()
2020-10-24 20:27:42,495   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.MULTI_CLASSES_NMS: False
2020-10-24 20:27:42,495   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_TYPE: nms_gpu
2020-10-24 20:27:42,495   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_THRESH: 0.1
2020-10-24 20:27:42,495   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_PRE_MAXSIZE: 1000
2020-10-24 20:27:42,495   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_POST_MAXSIZE: 83
2020-10-24 20:27:42,495   INFO  
cfg.OPTIMIZATION = edict()
2020-10-24 20:27:42,495   INFO  cfg.OPTIMIZATION.BATCH_SIZE_PER_GPU: 2
2020-10-24 20:27:42,496   INFO  cfg.OPTIMIZATION.NUM_EPOCHS: 3
2020-10-24 20:27:42,496   INFO  cfg.OPTIMIZATION.OPTIMIZER: adam_onecycle
2020-10-24 20:27:42,496   INFO  cfg.OPTIMIZATION.LR: 0.01
2020-10-24 20:27:42,496   INFO  cfg.OPTIMIZATION.WEIGHT_DECAY: 0.01
2020-10-24 20:27:42,496   INFO  cfg.OPTIMIZATION.MOMENTUM: 0.9
2020-10-24 20:27:42,496   INFO  cfg.OPTIMIZATION.MOMS: [0.95, 0.85]
2020-10-24 20:27:42,496   INFO  cfg.OPTIMIZATION.PCT_START: 0.4
2020-10-24 20:27:42,496   INFO  cfg.OPTIMIZATION.DIV_FACTOR: 10
2020-10-24 20:27:42,496   INFO  cfg.OPTIMIZATION.DECAY_STEP_LIST: [35, 45]
2020-10-24 20:27:42,496   INFO  cfg.OPTIMIZATION.LR_DECAY: 0.1
2020-10-24 20:27:42,496   INFO  cfg.OPTIMIZATION.LR_CLIP: 1e-07
2020-10-24 20:27:42,496   INFO  cfg.OPTIMIZATION.LR_WARMUP: False
2020-10-24 20:27:42,496   INFO  cfg.OPTIMIZATION.WARMUP_EPOCH: 1
2020-10-24 20:27:42,497   INFO  cfg.OPTIMIZATION.GRAD_NORM_CLIP: 10
2020-10-24 20:27:42,497   INFO  cfg.TAG: tpoint_rcnn
2020-10-24 20:27:42,497   INFO  cfg.EXP_GROUP_PATH: nuscenes_models
2020-10-24 20:27:42,571   INFO  Database filter by min points car: 4082 => 3303
2020-10-24 20:27:42,572   INFO  Database filter by min points truck: 451 => 412
2020-10-24 20:27:42,572   INFO  Database filter by min points construction_vehicle: 174 => 161
2020-10-24 20:27:42,572   INFO  Database filter by min points bus: 337 => 309
2020-10-24 20:27:42,572   INFO  Database filter by min points trailer: 59 => 57
2020-10-24 20:27:42,572   INFO  Database filter by min points barrier: 1851 => 1741
2020-10-24 20:27:42,572   INFO  Database filter by min points motorcycle: 179 => 149
2020-10-24 20:27:42,572   INFO  Database filter by min points bicycle: 147 => 136
2020-10-24 20:27:42,573   INFO  Database filter by min points pedestrian: 3068 => 2799
2020-10-24 20:27:42,573   INFO  Database filter by min points traffic_cone: 773 => 635
2020-10-24 20:27:42,574   INFO  Loading NuScenes dataset
2020-10-24 20:27:42,606   INFO  Total samples for NuScenes dataset: 323
2020-10-24 20:27:42,612   INFO  Total samples after balanced resampling: 1630
2020-10-24 20:27:44,830   INFO  DistributedDataParallel(
  (module): PointRCNN(
    (vfe): None
    (backbone_3d): PointNet2MSG(
      (SA_modules): ModuleList(
        (0): PointnetSAModuleMSG(
          (groupers): ModuleList(
            (0): QueryAndGroup()
            (1): QueryAndGroup()
          )
          (mlps): ModuleList(
            (0): Sequential(
              (0): Conv2d(5, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
              (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU()
              (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (8): ReLU()
            )
            (1): Sequential(
              (0): Conv2d(5, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
              (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU()
              (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (8): ReLU()
            )
          )
        )
        (1): PointnetSAModuleMSG(
          (groupers): ModuleList(
            (0): QueryAndGroup()
            (1): QueryAndGroup()
          )
          (mlps): ModuleList(
            (0): Sequential(
              (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
              (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU()
              (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (8): ReLU()
            )
            (1): Sequential(
              (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
              (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU()
              (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (8): ReLU()
            )
          )
        )
        (2): PointnetSAModuleMSG(
          (groupers): ModuleList(
            (0): QueryAndGroup()
            (1): QueryAndGroup()
          )
          (mlps): ModuleList(
            (0): Sequential(
              (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
              (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU()
              (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (8): ReLU()
            )
            (1): Sequential(
              (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
              (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU()
              (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (8): ReLU()
            )
          )
        )
        (3): PointnetSAModuleMSG(
          (groupers): ModuleList(
            (0): QueryAndGroup()
            (1): QueryAndGroup()
          )
          (mlps): ModuleList(
            (0): Sequential(
              (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
              (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU()
              (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (8): ReLU()
            )
            (1): Sequential(
              (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
              (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU()
              (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (8): ReLU()
            )
          )
        )
      )
      (FP_modules): ModuleList(
        (0): PointnetFPModule(
          (mlp): Sequential(
            (0): Conv2d(258, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
          )
        )
        (1): PointnetFPModule(
          (mlp): Sequential(
            (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
          )
        )
        (2): PointnetFPModule(
          (mlp): Sequential(
            (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
          )
        )
        (3): PointnetFPModule(
          (mlp): Sequential(
            (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
          )
        )
      )
    )
    (map_to_bev_module): None
    (pfe): None
    (backbone_2d): None
    (dense_head): None
    (point_head): PointHeadBox(
      (cls_loss_func): SigmoidFocalClassificationLoss()
      (reg_loss_func): WeightedSmoothL1Loss()
      (cls_layers): Sequential(
        (0): Linear(in_features=128, out_features=256, bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Linear(in_features=256, out_features=256, bias=False)
        (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
        (6): Linear(in_features=256, out_features=10, bias=True)
      )
      (box_layers): Sequential(
        (0): Linear(in_features=128, out_features=256, bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Linear(in_features=256, out_features=256, bias=False)
        (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
        (6): Linear(in_features=256, out_features=8, bias=True)
      )
    )
    (roi_head): PointRCNNHead(
      (proposal_target_layer): ProposalTargetLayer()
      (reg_loss_func): WeightedSmoothL1Loss()
      (SA_modules): ModuleList(
        (0): PointnetSAModule(
          (groupers): ModuleList(
            (0): QueryAndGroup()
          )
          (mlps): ModuleList(
            (0): Sequential(
              (0): Conv2d(131, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
              (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU()
              (6): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (8): ReLU()
            )
          )
        )
        (1): PointnetSAModule(
          (groupers): ModuleList(
            (0): QueryAndGroup()
          )
          (mlps): ModuleList(
            (0): Sequential(
              (0): Conv2d(131, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
              (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU()
              (6): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (8): ReLU()
            )
          )
        )
        (2): PointnetSAModule(
          (groupers): ModuleList(
            (0): GroupAll()
          )
          (mlps): ModuleList(
            (0): Sequential(
              (0): Conv2d(259, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
              (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU()
              (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (8): ReLU()
            )
          )
        )
      )
      (xyz_up_layer): Sequential(
        (0): Conv2d(5, 128, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU()
        (2): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
        (3): ReLU()
      )
      (merge_down_layer): Sequential(
        (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU()
      )
      (cls_layers): Sequential(
        (0): Conv1d(512, 256, kernel_size=(1,), stride=(1,), bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Dropout(p=0.0, inplace=False)
        (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
        (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
      )
      (reg_layers): Sequential(
        (0): Conv1d(512, 256, kernel_size=(1,), stride=(1,), bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Dropout(p=0.0, inplace=False)
        (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
        (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Conv1d(256, 7, kernel_size=(1,), stride=(1,))
      )
      (roipoint_pool3d_layer): RoIPointPool3d()
    )
  )
)
2020-10-24 20:27:44,834   INFO  **********************Start training nuscenes_models/tpoint_rcnn(default)**********************
